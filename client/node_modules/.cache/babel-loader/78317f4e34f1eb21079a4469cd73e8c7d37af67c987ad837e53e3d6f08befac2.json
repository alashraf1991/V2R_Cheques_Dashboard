{"ast":null,"code":"import { ref, onMounted, nextTick } from 'vue';\nimport { Chart, registerables } from 'chart.js';\nimport axios from 'axios';\nimport { format, parseISO } from 'date-fns';\nChart.register(...registerables);\nexport default {\n  name: 'Dashboard',\n  setup() {\n    const loading = ref(false);\n    const summary = ref({\n      totalBuildings: 0,\n      totalApartments: 0,\n      totalCheques: 0,\n      totalAmount: 0\n    });\n    const recentCheques = ref([]);\n    const buildings = ref([]);\n    const apartments = ref([]);\n    const cheques = ref([]);\n    const chequesChart = ref(null);\n    const buildingsChart = ref(null);\n    const fetchSummary = async () => {\n      try {\n        const [buildingsRes, apartmentsRes, chequesRes, summaryRes] = await Promise.all([axios.get('/api/buildings'), axios.get('/api/apartments'), axios.get('/api/cheques/detail'), axios.get('/api/cheques/summary')]);\n\n        // Store the data for charts\n        buildings.value = buildingsRes.data;\n        apartments.value = apartmentsRes.data;\n        cheques.value = chequesRes.data;\n\n        // Debug logging\n        console.log('Dashboard - Buildings data:', buildingsRes.data);\n        console.log('Dashboard - Apartments data:', apartmentsRes.data);\n        console.log('Dashboard - Cheques data:', chequesRes.data);\n        console.log('Dashboard - Summary data:', summaryRes.data);\n\n        // Try to get from summary first, then fallback to cheques detail\n        let totalCheques = summaryRes.data?.NumberOfCheques || summaryRes.data?.numberOfCheques || 0;\n        let totalAmount = summaryRes.data?.TotalAmount || summaryRes.data?.totalAmount || 0;\n\n        // Fallback: calculate from cheques detail if summary is empty\n        if (!totalCheques && chequesRes.data.length > 0) {\n          totalCheques = chequesRes.data.length;\n          totalAmount = chequesRes.data.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n          console.log('Dashboard - Calculated from cheques:', {\n            totalCheques,\n            totalAmount\n          });\n        }\n        summary.value = {\n          totalBuildings: buildingsRes.data.length,\n          totalApartments: apartmentsRes.data.length,\n          totalCheques: totalCheques,\n          totalAmount: totalAmount\n        };\n      } catch (error) {\n        console.error('Error fetching summary:', error);\n      }\n    };\n    const fetchRecentCheques = async () => {\n      try {\n        const response = await axios.get('/api/cheques/detail');\n        recentCheques.value = response.data.slice(0, 10); // Get first 10\n        console.log('Dashboard - Recent cheques:', recentCheques.value);\n      } catch (error) {\n        console.error('Error fetching recent cheques:', error);\n        recentCheques.value = [];\n      }\n    };\n    const createCharts = async () => {\n      await nextTick();\n\n      // Cheques by Month Chart\n      if (chequesChart.value) {\n        // Calculate cheques by month from real data\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const chequesByMonth = new Array(12).fill(0);\n        cheques.value.forEach(cheque => {\n          if (cheque.ChequeDate) {\n            try {\n              const date = new Date(cheque.ChequeDate);\n              const month = date.getMonth();\n              chequesByMonth[month]++;\n            } catch (e) {\n              console.log('Could not parse date:', cheque.ChequeDate);\n            }\n          }\n        });\n        new Chart(chequesChart.value, {\n          type: 'line',\n          data: {\n            labels: monthNames,\n            datasets: [{\n              label: 'Cheques Count',\n              data: chequesByMonth,\n              borderColor: 'rgb(59, 130, 246)',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n              tension: 0.4,\n              fill: true\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    return `Cheques: ${context.parsed.y}`;\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                beginAtZero: true,\n                ticks: {\n                  stepSize: 1\n                }\n              },\n              x: {\n                grid: {\n                  display: false\n                }\n              }\n            }\n          }\n        });\n      }\n\n      // Buildings Chart\n      if (buildingsChart.value) {\n        // Calculate building statistics for the chart\n        const buildingStats = buildings.value.map(building => {\n          const buildingApartments = apartments.value.filter(apt => apt.BuildingName === building.BuildingName || apt.buildingName === building.BuildingName);\n          const buildingCheques = cheques.value.filter(cheque => cheque.BuildingName === building.BuildingName || cheque.buildingName === building.BuildingName);\n          const totalAmount = buildingCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n          return {\n            name: building.BuildingName,\n            apartments: buildingApartments.length,\n            cheques: buildingCheques.length,\n            amount: totalAmount\n          };\n        });\n\n        // Sort by amount (highest first) and take top 5 for better chart readability\n        const topBuildings = buildingStats.sort((a, b) => b.amount - a.amount).slice(0, 5);\n        new Chart(buildingsChart.value, {\n          type: 'doughnut',\n          data: {\n            labels: topBuildings.map(b => b.name),\n            datasets: [{\n              data: topBuildings.map(b => b.amount),\n              backgroundColor: ['rgb(59, 130, 246)',\n              // Blue\n              'rgb(16, 185, 129)',\n              // Green\n              'rgb(245, 158, 11)',\n              // Yellow\n              'rgb(239, 68, 68)',\n              // Red\n              'rgb(139, 92, 246)' // Purple\n              ]\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  usePointStyle: true,\n                  padding: 20\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function (context) {\n                    const building = topBuildings[context.dataIndex];\n                    return [`Building: ${building.name}`, `Total Amount: $${building.amount.toLocaleString()}`, `Apartments: ${building.apartments}`, `Cheques: ${building.cheques}`];\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    const refreshData = async () => {\n      loading.value = true;\n      try {\n        await Promise.all([fetchSummary(), fetchRecentCheques()]);\n        await createCharts();\n      } finally {\n        loading.value = false;\n      }\n    };\n    const formatCurrency = amount => {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(amount || 0);\n    };\n    const formatDate = dateString => {\n      try {\n        return format(parseISO(dateString), 'MMM dd, yyyy');\n      } catch {\n        return dateString;\n      }\n    };\n    onMounted(async () => {\n      await refreshData();\n    });\n    return {\n      loading,\n      summary,\n      recentCheques,\n      buildings,\n      apartments,\n      cheques,\n      chequesChart,\n      buildingsChart,\n      refreshData,\n      formatCurrency,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","Chart","registerables","axios","format","parseISO","register","name","setup","loading","summary","totalBuildings","totalApartments","totalCheques","totalAmount","recentCheques","buildings","apartments","cheques","chequesChart","buildingsChart","fetchSummary","buildingsRes","apartmentsRes","chequesRes","summaryRes","Promise","all","get","value","data","console","log","NumberOfCheques","numberOfCheques","TotalAmount","length","reduce","sum","cheque","Amount","error","fetchRecentCheques","response","slice","createCharts","monthNames","chequesByMonth","Array","fill","forEach","ChequeDate","date","Date","month","getMonth","e","type","labels","datasets","label","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","parsed","y","scales","beginAtZero","ticks","stepSize","x","grid","buildingStats","map","building","buildingApartments","filter","apt","BuildingName","buildingName","buildingCheques","amount","topBuildings","sort","a","b","position","usePointStyle","padding","dataIndex","toLocaleString","refreshData","formatCurrency","Intl","NumberFormat","style","currency","formatDate","dateString"],"sources":["D:\\Workplace\\V2R\\V2R_ChequesDashboard\\client\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-6\">\r\n    <!-- Page Header -->\r\n    <div class=\"sm:flex sm:items-center sm:justify-between\">\r\n      <div>\r\n        <h1 class=\"text-3xl font-bold text-gray-900\">Dashboard Overview</h1>\r\n        <p class=\"mt-2 text-sm text-gray-700\">\r\n          Real-time overview of your buildings, apartments, and cheques\r\n        </p>\r\n      </div>\r\n      <div class=\"mt-4 sm:mt-0\">\r\n        <button \r\n          @click=\"refreshData\"\r\n          :disabled=\"loading\"\r\n          class=\"btn-primary inline-flex items-center\"\r\n        >\r\n          <svg v-if=\"loading\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          <svg v-else class=\"-ml-1 mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n          </svg>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Summary Cards -->\r\n    <div class=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-primary-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Buildings</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ summary.totalBuildings }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 5v4m8-4v4M8 11v4m8-4v4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Apartments</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ summary.totalApartments }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Cheques</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ summary.totalCheques }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Amount</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ formatCurrency(summary.totalAmount) }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Section -->\r\n    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n      <!-- Cheques by Month Chart -->\r\n      <div class=\"card\">\r\n        <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Cheques by Month</h3>\r\n        <div class=\"h-64\">\r\n          <canvas ref=\"chequesChart\"></canvas>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Buildings Distribution Chart -->\r\n      <div class=\"card\">\r\n        <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Buildings Overview</h3>\r\n        <div class=\"h-64\">\r\n          <canvas ref=\"buildingsChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Recent Activity -->\r\n    <div class=\"card\">\r\n      <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Recent Cheques</h3>\r\n      <div class=\"overflow-x-auto\">\r\n        <table class=\"min-w-full divide-y divide-gray-200\">\r\n          <thead class=\"bg-gray-50\">\r\n            <tr>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Building</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Apartment</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Cheque No</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"bg-white divide-y divide-gray-200\">\r\n            <tr v-for=\"cheque in recentCheques\" :key=\"cheque.ChequeID\" class=\"hover:bg-gray-50\">\r\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                {{ formatDate(cheque.ChequeDate) }}\r\n              </td>\r\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                {{ cheque.BuildingName }}\r\n              </td>\r\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                {{ cheque.ApartmentName }}\r\n              </td>\r\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                {{ cheque.ChequeNo }}\r\n              </td>\r\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                {{ formatCurrency(cheque.Amount) }}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, nextTick } from 'vue'\r\nimport { Chart, registerables } from 'chart.js'\r\nimport axios from 'axios'\r\nimport { format, parseISO } from 'date-fns'\r\n\r\nChart.register(...registerables)\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  setup() {\r\n    const loading = ref(false)\r\n    const summary = ref({\r\n      totalBuildings: 0,\r\n      totalApartments: 0,\r\n      totalCheques: 0,\r\n      totalAmount: 0\r\n    })\r\n    const recentCheques = ref([])\r\n    const buildings = ref([])\r\n    const apartments = ref([])\r\n    const cheques = ref([])\r\n    const chequesChart = ref(null)\r\n    const buildingsChart = ref(null)\r\n\r\n    const fetchSummary = async () => {\r\n      try {\r\n        const [buildingsRes, apartmentsRes, chequesRes, summaryRes] = await Promise.all([\r\n          axios.get('/api/buildings'),\r\n          axios.get('/api/apartments'),\r\n          axios.get('/api/cheques/detail'),\r\n          axios.get('/api/cheques/summary')\r\n        ])\r\n\r\n        // Store the data for charts\r\n        buildings.value = buildingsRes.data\r\n        apartments.value = apartmentsRes.data\r\n        cheques.value = chequesRes.data\r\n\r\n        // Debug logging\r\n        console.log('Dashboard - Buildings data:', buildingsRes.data)\r\n        console.log('Dashboard - Apartments data:', apartmentsRes.data)\r\n        console.log('Dashboard - Cheques data:', chequesRes.data)\r\n        console.log('Dashboard - Summary data:', summaryRes.data)\r\n\r\n        // Try to get from summary first, then fallback to cheques detail\r\n        let totalCheques = summaryRes.data?.NumberOfCheques || summaryRes.data?.numberOfCheques || 0\r\n        let totalAmount = summaryRes.data?.TotalAmount || summaryRes.data?.totalAmount || 0\r\n\r\n        // Fallback: calculate from cheques detail if summary is empty\r\n        if (!totalCheques && chequesRes.data.length > 0) {\r\n          totalCheques = chequesRes.data.length\r\n          totalAmount = chequesRes.data.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n          console.log('Dashboard - Calculated from cheques:', { totalCheques, totalAmount })\r\n        }\r\n\r\n        summary.value = {\r\n          totalBuildings: buildingsRes.data.length,\r\n          totalApartments: apartmentsRes.data.length,\r\n          totalCheques: totalCheques,\r\n          totalAmount: totalAmount\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching summary:', error)\r\n      }\r\n    }\r\n\r\n    const fetchRecentCheques = async () => {\r\n      try {\r\n        const response = await axios.get('/api/cheques/detail')\r\n        recentCheques.value = response.data.slice(0, 10) // Get first 10\r\n        console.log('Dashboard - Recent cheques:', recentCheques.value)\r\n      } catch (error) {\r\n        console.error('Error fetching recent cheques:', error)\r\n        recentCheques.value = []\r\n      }\r\n    }\r\n\r\n    const createCharts = async () => {\r\n      await nextTick()\r\n      \r\n      // Cheques by Month Chart\r\n      if (chequesChart.value) {\r\n        // Calculate cheques by month from real data\r\n        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        const chequesByMonth = new Array(12).fill(0)\r\n        \r\n        cheques.value.forEach(cheque => {\r\n          if (cheque.ChequeDate) {\r\n            try {\r\n              const date = new Date(cheque.ChequeDate)\r\n              const month = date.getMonth()\r\n              chequesByMonth[month]++\r\n            } catch (e) {\r\n              console.log('Could not parse date:', cheque.ChequeDate)\r\n            }\r\n          }\r\n        })\r\n\r\n        new Chart(chequesChart.value, {\r\n          type: 'line',\r\n          data: {\r\n            labels: monthNames,\r\n            datasets: [{\r\n              label: 'Cheques Count',\r\n              data: chequesByMonth,\r\n              borderColor: 'rgb(59, 130, 246)',\r\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n              tension: 0.4,\r\n              fill: true\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    return `Cheques: ${context.parsed.y}`\r\n                  }\r\n                }\r\n              }\r\n            },\r\n                         scales: {\r\n               y: {\r\n                 beginAtZero: true,\r\n                 ticks: {\r\n                   stepSize: 1\r\n                 }\r\n               },\r\n               x: {\r\n                 grid: {\r\n                   display: false\r\n                 }\r\n               }\r\n             }\r\n          }\r\n        })\r\n      }\r\n\r\n      // Buildings Chart\r\n      if (buildingsChart.value) {\r\n        // Calculate building statistics for the chart\r\n        const buildingStats = buildings.value.map(building => {\r\n          const buildingApartments = apartments.value.filter(apt => \r\n            apt.BuildingName === building.BuildingName || \r\n            apt.buildingName === building.BuildingName\r\n          )\r\n          const buildingCheques = cheques.value.filter(cheque => \r\n            cheque.BuildingName === building.BuildingName || \r\n            cheque.buildingName === building.BuildingName\r\n          )\r\n          const totalAmount = buildingCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n          \r\n          return {\r\n            name: building.BuildingName,\r\n            apartments: buildingApartments.length,\r\n            cheques: buildingCheques.length,\r\n            amount: totalAmount\r\n          }\r\n        })\r\n\r\n        // Sort by amount (highest first) and take top 5 for better chart readability\r\n        const topBuildings = buildingStats\r\n          .sort((a, b) => b.amount - a.amount)\r\n          .slice(0, 5)\r\n\r\n        new Chart(buildingsChart.value, {\r\n          type: 'doughnut',\r\n          data: {\r\n            labels: topBuildings.map(b => b.name),\r\n            datasets: [{\r\n              data: topBuildings.map(b => b.amount),\r\n              backgroundColor: [\r\n                'rgb(59, 130, 246)',   // Blue\r\n                'rgb(16, 185, 129)',   // Green\r\n                'rgb(245, 158, 11)',   // Yellow\r\n                'rgb(239, 68, 68)',    // Red\r\n                'rgb(139, 92, 246)'    // Purple\r\n              ]\r\n            }]\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              legend: {\r\n                position: 'bottom',\r\n                labels: {\r\n                  usePointStyle: true,\r\n                  padding: 20\r\n                }\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: function(context) {\r\n                    const building = topBuildings[context.dataIndex]\r\n                    return [\r\n                      `Building: ${building.name}`,\r\n                      `Total Amount: $${building.amount.toLocaleString()}`,\r\n                      `Apartments: ${building.apartments}`,\r\n                      `Cheques: ${building.cheques}`\r\n                    ]\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    const refreshData = async () => {\r\n      loading.value = true\r\n      try {\r\n        await Promise.all([fetchSummary(), fetchRecentCheques()])\r\n        await createCharts()\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    const formatCurrency = (amount) => {\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount || 0)\r\n    }\r\n\r\n    const formatDate = (dateString) => {\r\n      try {\r\n        return format(parseISO(dateString), 'MMM dd, yyyy')\r\n      } catch {\r\n        return dateString\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      await refreshData()\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      summary,\r\n      recentCheques,\r\n      buildings,\r\n      apartments,\r\n      cheques,\r\n      chequesChart,\r\n      buildingsChart,\r\n      refreshData,\r\n      formatCurrency,\r\n      formatDate\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}