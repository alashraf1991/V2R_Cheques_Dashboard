{"ast":null,"code":"import { ref, computed, onMounted, watch } from 'vue';\nimport axios from 'axios';\nimport { format, parseISO } from 'date-fns';\nexport default {\n  name: 'Apartments',\n  setup() {\n    const loading = ref(false);\n    const apartments = ref([]);\n    const buildings = ref([]);\n    const cheques = ref([]);\n    const selectedApartment = ref(null);\n    const filters = ref({\n      buildingId: '',\n      floor: '',\n      search: ''\n    });\n    const currentPage = ref(1);\n    const itemsPerPage = 12;\n    const availableFloors = computed(() => {\n      const floors = [...new Set(apartments.value.map(apt => apt.FloorNumber))];\n      return floors.sort((a, b) => a - b);\n    });\n    const filteredApartments = computed(() => {\n      let filtered = apartments.value;\n      console.log('filteredApartments computed - apartments.value:', apartments.value);\n      console.log('filteredApartments computed - apartments.value.length:', apartments.value.length);\n\n      // Don't filter by buildingId since the API already handles that\n      // if (filters.value.buildingId) {\n      //   filtered = filtered.filter(apt => apt.BuildingID === filters.value.buildingId)\n      // }\n\n      if (filters.value.floor) {\n        filtered = filtered.filter(apt => apt.FloorNumber === filters.value.floor);\n      }\n      if (filters.value.search) {\n        const term = filters.value.search.toLowerCase();\n        filtered = filtered.filter(apt => apt.ApartmentName?.toLowerCase().includes(term) || apt.ApartmentNumber?.toLowerCase().includes(term) || getBuildingName(apt.BuildingID)?.toLowerCase().includes(term));\n      }\n      console.log('filteredApartments computed - final filtered:', filtered);\n      console.log('filteredApartments computed - final filtered.length:', filtered.length);\n      return filtered;\n    });\n    const paginatedApartments = computed(() => {\n      const start = (currentPage.value - 1) * itemsPerPage;\n      const end = start + itemsPerPage;\n      return filteredApartments.value.slice(start, end);\n    });\n    const totalPages = computed(() => Math.ceil(filteredApartments.value.length / itemsPerPage));\n    const startIndex = computed(() => (currentPage.value - 1) * itemsPerPage);\n    const endIndex = computed(() => Math.min(startIndex.value + itemsPerPage, filteredApartments.value.length));\n    const uniqueBuildings = computed(() => new Set(filteredApartments.value.map(apt => apt.BuildingID)).size);\n    const totalCheques = computed(() => cheques.value.length);\n    const totalAmount = computed(() => {\n      return cheques.value.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n    });\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        const [buildingsRes, chequesRes] = await Promise.all([axios.get('/api/buildings'), axios.get('/api/cheques/detail')]);\n        buildings.value = buildingsRes.data;\n        cheques.value = chequesRes.data;\n\n        // Fetch apartments based on current filters\n        await fetchApartments();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const fetchApartments = async () => {\n      try {\n        const params = {};\n        if (filters.value.buildingId) {\n          params.buildingId = filters.value.buildingId;\n        }\n        console.log('Fetching apartments with params:', params);\n        const apartmentsRes = await axios.get('/api/apartments', {\n          params\n        });\n        console.log('API response:', apartmentsRes.data);\n        console.log('Response length:', apartmentsRes.data.length);\n        apartments.value = apartmentsRes.data;\n        console.log('Updated apartments.value:', apartments.value);\n        console.log('Updated apartments.value length:', apartments.value.length);\n      } catch (error) {\n        console.error('Error fetching apartments:', error);\n      }\n    };\n    const applyFilters = () => {\n      currentPage.value = 1;\n      // Fetch apartments with new filters\n      fetchApartments();\n    };\n    const clearFilters = () => {\n      filters.value = {\n        buildingId: '',\n        floor: '',\n        search: ''\n      };\n      currentPage.value = 1;\n      // Fetch all apartments when filters are cleared\n      fetchApartments();\n    };\n    const previousPage = () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n      }\n    };\n    const nextPage = () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n      }\n    };\n    const selectApartment = apartment => {\n      selectedApartment.value = apartment;\n    };\n    const refreshData = async () => {\n      await fetchData();\n      // Also refresh apartments with current filters\n      await fetchApartments();\n    };\n    const getBuildingName = buildingId => {\n      const building = buildings.value.find(b => b.BuildingID === buildingId);\n      return building ? building.BuildingName : 'Unknown Building';\n    };\n    const getBuildingNumber = buildingId => {\n      const building = buildings.value.find(b => b.BuildingID === buildingId);\n      return building ? building.BuildingNumber : null;\n    };\n    const getApartmentCheques = apartmentId => {\n      return cheques.value.filter(cheque => cheque.ApartmentID === apartmentId);\n    };\n    const getApartmentAmount = apartmentId => {\n      const apartmentCheques = getApartmentCheques(apartmentId);\n      return apartmentCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n    };\n    const formatCurrency = amount => {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(amount || 0);\n    };\n    const formatDate = dateString => {\n      try {\n        return format(parseISO(dateString), 'MMM dd, yyyy');\n      } catch {\n        return dateString;\n      }\n    };\n    onMounted(async () => {\n      console.log('Component mounted, fetching data...');\n      await fetchData();\n      console.log('Initial data fetch complete');\n    });\n    watch(filters, (newFilters, oldFilters) => {\n      currentPage.value = 1;\n\n      // Only fetch apartments if buildingId actually changed\n      if (newFilters.buildingId !== oldFilters?.buildingId) {\n        console.log('Building filter changed, fetching apartments...');\n        fetchApartments();\n      }\n    });\n    return {\n      loading,\n      apartments,\n      buildings,\n      cheques,\n      selectedApartment,\n      filters,\n      currentPage,\n      totalPages,\n      startIndex,\n      endIndex,\n      availableFloors,\n      filteredApartments,\n      paginatedApartments,\n      uniqueBuildings,\n      totalCheques,\n      totalAmount,\n      applyFilters,\n      clearFilters,\n      previousPage,\n      nextPage,\n      selectApartment,\n      refreshData,\n      getBuildingName,\n      getBuildingNumber,\n      getApartmentCheques,\n      getApartmentAmount,\n      fetchApartments,\n      formatCurrency,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","axios","format","parseISO","name","setup","loading","apartments","buildings","cheques","selectedApartment","filters","buildingId","floor","search","currentPage","itemsPerPage","availableFloors","floors","Set","value","map","apt","FloorNumber","sort","a","b","filteredApartments","filtered","console","log","length","filter","term","toLowerCase","ApartmentName","includes","ApartmentNumber","getBuildingName","BuildingID","paginatedApartments","start","end","slice","totalPages","Math","ceil","startIndex","endIndex","min","uniqueBuildings","size","totalCheques","totalAmount","reduce","sum","cheque","Amount","fetchData","buildingsRes","chequesRes","Promise","all","get","data","fetchApartments","error","params","apartmentsRes","applyFilters","clearFilters","previousPage","nextPage","selectApartment","apartment","refreshData","building","find","BuildingName","getBuildingNumber","BuildingNumber","getApartmentCheques","apartmentId","ApartmentID","getApartmentAmount","apartmentCheques","formatCurrency","amount","Intl","NumberFormat","style","currency","formatDate","dateString","newFilters","oldFilters"],"sources":["D:\\Workplace\\V2R\\V2R_ChequesDashboard\\client\\src\\views\\Apartments.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-6\">\r\n    <!-- Page Header -->\r\n    <div class=\"sm:flex sm:items-center sm:justify-between\">\r\n      <div>\r\n        <h1 class=\"text-3xl font-bold text-gray-900\">Apartments Management</h1>\r\n        <p class=\"mt-2 text-sm text-gray-700\">\r\n          View and manage all apartment information\r\n        </p>\r\n      </div>\r\n      <div class=\"mt-4 sm:mt-0\">\r\n        <button \r\n          @click=\"refreshData\"\r\n          :disabled=\"loading\"\r\n          class=\"btn-primary inline-flex items-center\"\r\n        >\r\n          <svg v-if=\"loading\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          <svg v-else class=\"-ml-1 mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n          </svg>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filters -->\r\n    <div class=\"card\">\r\n      <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Filters</h3>\r\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div>\r\n          <label class=\"block text-sm font-medium text-gray-700 mb-2\">Building</label>\r\n          <select \r\n            v-model=\"filters.buildingId\"\r\n            class=\"input-field\"\r\n            @change=\"applyFilters\"\r\n          >\r\n            <option value=\"\">All Buildings</option>\r\n            <option \r\n              v-for=\"building in buildings\" \r\n              :key=\"building.BuildingID\" \r\n              :value=\"building.BuildingID\"\r\n            >\r\n              {{ building.BuildingName }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label class=\"block text-sm font-medium text-gray-700 mb-2\">Floor</label>\r\n          <select \r\n            v-model=\"filters.floor\"\r\n            class=\"input-field\"\r\n            @change=\"applyFilters\"\r\n          >\r\n            <option value=\"\">All Floors</option>\r\n            <option \r\n              v-for=\"floor in availableFloors\" \r\n              :key=\"floor\" \r\n              :value=\"floor\"\r\n            >\r\n              Floor {{ floor }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label class=\"block text-sm font-medium text-gray-700 mb-2\">Search</label>\r\n          <input \r\n            type=\"text\" \r\n            v-model=\"filters.search\"\r\n            placeholder=\"Search apartments...\"\r\n            class=\"input-field\"\r\n            @input=\"applyFilters\"\r\n          >\r\n        </div>\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <button \r\n          @click=\"clearFilters\"\r\n          class=\"btn-secondary mr-2\"\r\n        >\r\n          Clear Filters\r\n        </button>\r\n        <button \r\n          @click=\"applyFilters\"\r\n          :disabled=\"loading\"\r\n          class=\"btn-primary\"\r\n        >\r\n          Apply Filters\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    \r\n\r\n     <!-- Summary Cards -->\r\n     <div class=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-primary-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 5v4m8-4v4M8 11v4m8-4v4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Apartments</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ filteredApartments.length }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Buildings</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ uniqueBuildings }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Cheques</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ totalCheques }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Amount</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ formatCurrency(totalAmount) }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Apartments Grid -->\r\n    <div class=\"grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3\">\r\n      <div \r\n        v-for=\"apartment in paginatedApartments\" \r\n        :key=\"apartment.ApartmentID\"\r\n        class=\"card hover:shadow-lg transition-shadow duration-200 cursor-pointer\"\r\n        @click=\"selectApartment(apartment)\"\r\n      >\r\n        <div class=\"flex items-center justify-between mb-4\">\r\n          <div class=\"flex items-center\">\r\n            <div class=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 5v4m8-4v4M8 11v4m8-4v4\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"ml-3\">\r\n              <h3 class=\"text-lg font-medium text-gray-900\">{{ apartment.ApartmentName }}</h3>\r\n              <p class=\"text-sm text-gray-500\">{{ getBuildingName(apartment.BuildingID) }}</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"text-right\">\r\n            <div class=\"text-2xl font-bold text-green-600\">\r\n              {{ apartment.FloorNumber }}\r\n            </div>\r\n            <div class=\"text-xs text-gray-500\">Floor</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"border-t border-gray-100 pt-4\">\r\n          <div class=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div>\r\n              <span class=\"text-gray-500\">Apartment #:</span>\r\n              <span class=\"ml-2 font-medium text-gray-900\">\r\n                {{ apartment.ApartmentNumber || 'N/A' }}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <span class=\"text-gray-500\">Building #:</span>\r\n              <span class=\"ml-2 font-medium text-gray-900\">\r\n                {{ apartment.BuildingNumber || 'N/A' }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mt-4 pt-4 border-t border-gray-100\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <span class=\"text-sm text-gray-500\">Cheques</span>\r\n            <div class=\"flex items-center space-x-2\">\r\n              <span class=\"text-sm font-medium text-gray-900\">\r\n                {{ getApartmentCheques(apartment.ApartmentID).length }}\r\n              </span>\r\n              <span class=\"text-xs text-gray-500\">|</span>\r\n              <span class=\"text-sm font-medium text-gray-900\">\r\n                {{ formatCurrency(getApartmentAmount(apartment.ApartmentID)) }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Pagination -->\r\n    <div class=\"flex items-center justify-between\">\r\n      <div class=\"flex-1 flex justify-between sm:hidden\">\r\n        <button \r\n          @click=\"previousPage\"\r\n          :disabled=\"currentPage === 1\"\r\n          class=\"btn-secondary\"\r\n        >\r\n          Previous\r\n        </button>\r\n        <button \r\n          @click=\"nextPage\"\r\n          :disabled=\"currentPage === totalPages\"\r\n          class=\"btn-primary\"\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n      <div class=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\r\n        <div>\r\n          <p class=\"text-sm text-gray-700\">\r\n            Showing \r\n            <span class=\"font-medium\">{{ startIndex + 1 }}</span>\r\n            to \r\n            <span class=\"font-medium\">{{ endIndex }}</span>\r\n            of \r\n            <span class=\"font-medium\">{{ filteredApartments.length }}</span>\r\n            results\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <nav class=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\r\n            <button \r\n              @click=\"previousPage\"\r\n              :disabled=\"currentPage === 1\"\r\n              class=\"btn-secondary rounded-l-md\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <button \r\n              @click=\"nextPage\"\r\n              :disabled=\"currentPage === totalPages\"\r\n              class=\"btn-primary rounded-r-md\"\r\n            >\r\n              Next\r\n            </button>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Apartment Details Modal -->\r\n    <div v-if=\"selectedApartment\" class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n      <div class=\"relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white\">\r\n        <div class=\"mt-3\">\r\n          <div class=\"flex items-center justify-between mb-4\">\r\n            <h3 class=\"text-lg font-medium text-gray-900\">\r\n              {{ selectedApartment.ApartmentName }} Details\r\n            </h3>\r\n            <button \r\n              @click=\"selectedApartment = null\"\r\n              class=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"space-y-4\">\r\n            <div class=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Apartment Name</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ selectedApartment.ApartmentName }}</p>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Apartment Number</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ selectedApartment.ApartmentNumber || 'N/A' }}</p>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Floor Number</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ selectedApartment.FloorNumber }}</p>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Building</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ getBuildingName(selectedApartment.BuildingID) }}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"border-t border-gray-200 pt-4\">\r\n              <h4 class=\"text-md font-medium text-gray-900 mb-3\">Cheques History</h4>\r\n              <div class=\"max-h-60 overflow-y-auto\">\r\n                <div \r\n                  v-for=\"cheque in getApartmentCheques(selectedApartment.ApartmentID)\"\r\n                  :key=\"cheque.ChequeID\"\r\n                  class=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0\"\r\n                >\r\n                  <div>\r\n                    <span class=\"text-sm font-medium text-gray-900\">{{ cheque.ChequeNo }}</span>\r\n                    <span class=\"ml-2 text-xs text-gray-500\">{{ formatDate(cheque.ChequeDate) }}</span>\r\n                  </div>\r\n                  <span class=\"text-sm font-medium text-gray-900\">{{ formatCurrency(cheque.Amount) }}</span>\r\n                </div>\r\n                <div v-if=\"getApartmentCheques(selectedApartment.ApartmentID).length === 0\" class=\"text-center py-4 text-gray-500\">\r\n                  No cheques found for this apartment\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"border-t border-gray-200 pt-4\">\r\n              <h4 class=\"text-md font-medium text-gray-900 mb-3\">Financial Summary</h4>\r\n              <div class=\"grid grid-cols-2 gap-4 text-center\">\r\n                <div>\r\n                  <div class=\"text-2xl font-bold text-green-600\">\r\n                    {{ getApartmentCheques(selectedApartment.ApartmentID).length }}\r\n                  </div>\r\n                  <div class=\"text-xs text-gray-500\">Total Cheques</div>\r\n                </div>\r\n                <div>\r\n                  <div class=\"text-2xl font-bold text-purple-600\">\r\n                    {{ formatCurrency(getApartmentAmount(selectedApartment.ApartmentID)) }}\r\n                  </div>\r\n                  <div class=\"text-xs text-gray-500\">Total Amount</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, watch } from 'vue'\r\nimport axios from 'axios'\r\nimport { format, parseISO } from 'date-fns'\r\n\r\nexport default {\r\n  name: 'Apartments',\r\n  setup() {\r\n    const loading = ref(false)\r\n    const apartments = ref([])\r\n    const buildings = ref([])\r\n    const cheques = ref([])\r\n    const selectedApartment = ref(null)\r\n    \r\n    \r\n    \r\n    const filters = ref({\r\n      buildingId: '',\r\n      floor: '',\r\n      search: ''\r\n    })\r\n    \r\n    const currentPage = ref(1)\r\n    const itemsPerPage = 12\r\n\r\n    const availableFloors = computed(() => {\r\n      const floors = [...new Set(apartments.value.map(apt => apt.FloorNumber))]\r\n      return floors.sort((a, b) => a - b)\r\n    })\r\n\r\n    const filteredApartments = computed(() => {\r\n      let filtered = apartments.value\r\n\r\n      console.log('filteredApartments computed - apartments.value:', apartments.value)\r\n      console.log('filteredApartments computed - apartments.value.length:', apartments.value.length)\r\n\r\n      // Don't filter by buildingId since the API already handles that\r\n      // if (filters.value.buildingId) {\r\n      //   filtered = filtered.filter(apt => apt.BuildingID === filters.value.buildingId)\r\n      // }\r\n\r\n      if (filters.value.floor) {\r\n        filtered = filtered.filter(apt => apt.FloorNumber === filters.value.floor)\r\n      }\r\n\r\n      if (filters.value.search) {\r\n        const term = filters.value.search.toLowerCase()\r\n        filtered = filtered.filter(apt => \r\n          apt.ApartmentName?.toLowerCase().includes(term) ||\r\n          apt.ApartmentNumber?.toLowerCase().includes(term) ||\r\n          getBuildingName(apt.BuildingID)?.toLowerCase().includes(term)\r\n        )\r\n      }\r\n\r\n      console.log('filteredApartments computed - final filtered:', filtered)\r\n      console.log('filteredApartments computed - final filtered.length:', filtered.length)\r\n\r\n      return filtered\r\n    })\r\n\r\n    const paginatedApartments = computed(() => {\r\n      const start = (currentPage.value - 1) * itemsPerPage\r\n      const end = start + itemsPerPage\r\n      return filteredApartments.value.slice(start, end)\r\n    })\r\n\r\n    const totalPages = computed(() => Math.ceil(filteredApartments.value.length / itemsPerPage))\r\n    const startIndex = computed(() => (currentPage.value - 1) * itemsPerPage)\r\n    const endIndex = computed(() => Math.min(startIndex.value + itemsPerPage, filteredApartments.value.length))\r\n    const uniqueBuildings = computed(() => new Set(filteredApartments.value.map(apt => apt.BuildingID)).size)\r\n    const totalCheques = computed(() => cheques.value.length)\r\n    const totalAmount = computed(() => {\r\n      return cheques.value.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n    })\r\n\r\n    const fetchData = async () => {\r\n      loading.value = true\r\n      try {\r\n        const [buildingsRes, chequesRes] = await Promise.all([\r\n          axios.get('/api/buildings'),\r\n          axios.get('/api/cheques/detail')\r\n        ])\r\n\r\n        buildings.value = buildingsRes.data\r\n        cheques.value = chequesRes.data\r\n        \r\n        // Fetch apartments based on current filters\r\n        await fetchApartments()\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error)\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    const fetchApartments = async () => {\r\n      try {\r\n        const params = {}\r\n        if (filters.value.buildingId) {\r\n          params.buildingId = filters.value.buildingId\r\n        }\r\n        \r\n        console.log('Fetching apartments with params:', params)\r\n        const apartmentsRes = await axios.get('/api/apartments', { params })\r\n        console.log('API response:', apartmentsRes.data)\r\n        console.log('Response length:', apartmentsRes.data.length)\r\n        \r\n        apartments.value = apartmentsRes.data\r\n        console.log('Updated apartments.value:', apartments.value)\r\n        console.log('Updated apartments.value length:', apartments.value.length)\r\n      } catch (error) {\r\n        console.error('Error fetching apartments:', error)\r\n      }\r\n    }\r\n\r\n    const applyFilters = () => {\r\n      currentPage.value = 1\r\n      // Fetch apartments with new filters\r\n      fetchApartments()\r\n    }\r\n\r\n    const clearFilters = () => {\r\n      filters.value = {\r\n        buildingId: '',\r\n        floor: '',\r\n        search: ''\r\n      }\r\n      currentPage.value = 1\r\n      // Fetch all apartments when filters are cleared\r\n      fetchApartments()\r\n    }\r\n\r\n    const previousPage = () => {\r\n      if (currentPage.value > 1) {\r\n        currentPage.value--\r\n      }\r\n    }\r\n\r\n    const nextPage = () => {\r\n      if (currentPage.value < totalPages.value) {\r\n        currentPage.value++\r\n      }\r\n    }\r\n\r\n    const selectApartment = (apartment) => {\r\n      selectedApartment.value = apartment\r\n    }\r\n\r\n    const refreshData = async () => {\r\n      await fetchData()\r\n      // Also refresh apartments with current filters\r\n      await fetchApartments()\r\n    }\r\n\r\n    const getBuildingName = (buildingId) => {\r\n      const building = buildings.value.find(b => b.BuildingID === buildingId)\r\n      return building ? building.BuildingName : 'Unknown Building'\r\n    }\r\n\r\n    const getBuildingNumber = (buildingId) => {\r\n      const building = buildings.value.find(b => b.BuildingID === buildingId)\r\n      return building ? building.BuildingNumber : null\r\n    }\r\n\r\n    const getApartmentCheques = (apartmentId) => {\r\n      return cheques.value.filter(cheque => cheque.ApartmentID === apartmentId)\r\n    }\r\n\r\n    const getApartmentAmount = (apartmentId) => {\r\n      const apartmentCheques = getApartmentCheques(apartmentId)\r\n      return apartmentCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n    }\r\n\r\n    const formatCurrency = (amount) => {\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount || 0)\r\n    }\r\n\r\n    const formatDate = (dateString) => {\r\n      try {\r\n        return format(parseISO(dateString), 'MMM dd, yyyy')\r\n      } catch {\r\n        return dateString\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      console.log('Component mounted, fetching data...')\r\n      await fetchData()\r\n      console.log('Initial data fetch complete')\r\n    })\r\n\r\n    watch(filters, (newFilters, oldFilters) => {\r\n      currentPage.value = 1\r\n      \r\n      // Only fetch apartments if buildingId actually changed\r\n      if (newFilters.buildingId !== oldFilters?.buildingId) {\r\n        console.log('Building filter changed, fetching apartments...')\r\n        fetchApartments()\r\n      }\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      apartments,\r\n      buildings,\r\n      cheques,\r\n      selectedApartment,\r\n      filters,\r\n      currentPage,\r\n      totalPages,\r\n      startIndex,\r\n      endIndex,\r\n      availableFloors,\r\n      filteredApartments,\r\n      paginatedApartments,\r\n      uniqueBuildings,\r\n      totalCheques,\r\n      totalAmount,\r\n      applyFilters,\r\n      clearFilters,\r\n      previousPage,\r\n      nextPage,\r\n      selectApartment,\r\n      refreshData,\r\n      getBuildingName,\r\n      getBuildingNumber,\r\n      getApartmentCheques,\r\n      getApartmentAmount,\r\n      fetchApartments,\r\n      formatCurrency,\r\n      formatDate\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}