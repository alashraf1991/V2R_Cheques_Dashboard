{"ast":null,"code":"import { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nexport default {\n  name: 'Buildings',\n  setup() {\n    const loading = ref(false);\n    const buildings = ref([]);\n    const apartments = ref([]);\n    const cheques = ref([]);\n    const selectedBuilding = ref(null);\n    const totalApartments = computed(() => apartments.value.length);\n    const totalCheques = computed(() => cheques.value.length);\n    const totalAmount = computed(() => {\n      return cheques.value.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n    });\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        const [buildingsRes, apartmentsRes, chequesRes] = await Promise.all([axios.get('/api/buildings'), axios.get('/api/apartments'), axios.get('/api/cheques/detail')]);\n        buildings.value = buildingsRes.data;\n        apartments.value = apartmentsRes.data;\n        cheques.value = chequesRes.data;\n\n        // Debug logging\n        console.log('Buildings - Buildings data:', buildingsRes.data);\n        console.log('Buildings - Apartments data:', apartmentsRes.data);\n        console.log('Buildings - Cheques data:', chequesRes.data);\n        console.log('Buildings - Sample building name:', buildingsRes.data[0]?.BuildingName);\n        console.log('Buildings - Sample apartment BuildingName:', apartmentsRes.data[0]?.BuildingName);\n        console.log('Buildings - Sample cheque BuildingName:', chequesRes.data[0]?.BuildingName);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const getBuildingStats = buildingName => {\n      // Debug logging for this specific building\n      console.log(`Buildings - Getting stats for BuildingName: ${buildingName}`);\n      console.log(`Buildings - Available apartments:`, apartments.value);\n      console.log(`Buildings - Available cheques:`, cheques.value);\n\n      // Filter apartments by building name\n      const buildingApartments = apartments.value.filter(apt => apt.BuildingName === buildingName || apt.buildingName === buildingName);\n\n      // Filter cheques by building name\n      const buildingCheques = cheques.value.filter(cheque => cheque.BuildingName === buildingName || cheque.buildingName === buildingName);\n      const totalAmount = buildingCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0);\n      const stats = {\n        apartments: buildingApartments.length,\n        cheques: buildingCheques.length,\n        amount: totalAmount\n      };\n      console.log(`Buildings - Stats for BuildingName ${buildingName}:`, stats);\n      console.log(`Buildings - Found apartments:`, buildingApartments);\n      console.log(`Buildings - Found cheques:`, buildingCheques);\n      return stats;\n    };\n    const getBuildingApartments = buildingName => {\n      // Filter apartments by building name\n      return apartments.value.filter(apt => apt.BuildingName === buildingName || apt.buildingName === buildingName);\n    };\n    const getOccupancyRate = buildingName => {\n      // Calculate real occupancy rate using the IsOccupied column from sp_GetApartments\n      const buildingApartments = apartments.value.filter(apt => apt.BuildingName === buildingName || apt.buildingName === buildingName);\n      if (buildingApartments.length === 0) return 0;\n\n      // Count apartments where IsOccupied is true\n      const occupiedApartments = buildingApartments.filter(apt => apt.IsOccupied === true || apt.IsOccupied === 1 || apt.isOccupied === true || apt.isOccupied === 1);\n\n      // Calculate occupancy rate: (Occupied Apartments / Total Apartments) Ã— 100\n      const occupancyRate = occupiedApartments.length / buildingApartments.length * 100;\n      console.log(`Buildings - Occupancy calculation for ${buildingName}:`, {\n        totalApartments: buildingApartments.length,\n        occupiedApartments: occupiedApartments.length,\n        occupancyRate: Math.round(occupancyRate)\n      });\n      return Math.round(occupancyRate);\n    };\n\n    // Alternative: Calculate occupancy based on recent activity (last 3 months)\n    const getRecentOccupancyRate = buildingName => {\n      const buildingApartments = apartments.value.filter(apt => apt.BuildingName === buildingName || apt.buildingName === buildingName);\n      if (buildingApartments.length === 0) return 0;\n\n      // For recent occupancy, we can still use the IsOccupied column\n      // This assumes that IsOccupied reflects current status\n      const recentlyOccupiedApartments = buildingApartments.filter(apt => apt.IsOccupied === true || apt.IsOccupied === 1 || apt.isOccupied === true || apt.isOccupied === 1);\n      const recentOccupancyRate = recentlyOccupiedApartments.length / buildingApartments.length * 100;\n      console.log(`Buildings - Recent occupancy calculation for ${buildingName}:`, {\n        totalApartments: buildingApartments.length,\n        recentlyOccupiedApartments: recentlyOccupiedApartments.length,\n        recentOccupancyRate: Math.round(recentOccupancyRate)\n      });\n      return Math.round(recentOccupancyRate);\n    };\n\n    // Get detailed occupancy information for a building\n    const getOccupancyDetails = buildingName => {\n      const buildingApartments = apartments.value.filter(apt => apt.BuildingName === buildingName || apt.buildingName === buildingName);\n      if (buildingApartments.length === 0) return {\n        total: 0,\n        occupied: 0,\n        vacant: 0,\n        rate: 0\n      };\n      const occupiedApartments = buildingApartments.filter(apt => apt.IsOccupied === true || apt.IsOccupied === 1 || apt.isOccupied === true || apt.isOccupied === 1);\n      const vacantApartments = buildingApartments.filter(apt => apt.IsOccupied === false || apt.IsOccupied === 0 || apt.isOccupied === false || apt.isOccupied === 0);\n      return {\n        total: buildingApartments.length,\n        occupied: occupiedApartments.length,\n        vacant: vacantApartments.length,\n        rate: Math.round(occupiedApartments.length / buildingApartments.length * 100)\n      };\n    };\n    const selectBuilding = building => {\n      selectedBuilding.value = building;\n    };\n    const refreshData = async () => {\n      await fetchData();\n    };\n    const formatCurrency = amount => {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(amount || 0);\n    };\n    onMounted(() => {\n      fetchData();\n    });\n    return {\n      loading,\n      buildings,\n      apartments,\n      cheques,\n      selectedBuilding,\n      totalApartments,\n      totalCheques,\n      totalAmount,\n      getBuildingStats,\n      getBuildingApartments,\n      getOccupancyRate,\n      getRecentOccupancyRate,\n      selectBuilding,\n      refreshData,\n      formatCurrency\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","name","setup","loading","buildings","apartments","cheques","selectedBuilding","totalApartments","value","length","totalCheques","totalAmount","reduce","sum","cheque","Amount","fetchData","buildingsRes","apartmentsRes","chequesRes","Promise","all","get","data","console","log","BuildingName","error","getBuildingStats","buildingName","buildingApartments","filter","apt","buildingCheques","stats","amount","getBuildingApartments","getOccupancyRate","occupiedApartments","IsOccupied","isOccupied","occupancyRate","Math","round","getRecentOccupancyRate","recentlyOccupiedApartments","recentOccupancyRate","getOccupancyDetails","total","occupied","vacant","rate","vacantApartments","selectBuilding","building","refreshData","formatCurrency","Intl","NumberFormat","style","currency","format"],"sources":["D:\\Workplace\\V2R\\V2R_ChequesDashboard\\client\\src\\views\\Buildings.vue"],"sourcesContent":["<template>\r\n  <div class=\"space-y-6\">\r\n    <!-- Page Header -->\r\n    <div class=\"sm:flex sm:items-center sm:justify-between\">\r\n      <div>\r\n        <h1 class=\"text-3xl font-bold text-gray-900\">Buildings Management</h1>\r\n        <p class=\"mt-2 text-sm text-gray-700\">\r\n          Overview and management of all buildings\r\n        </p>\r\n      </div>\r\n      <div class=\"mt-4 sm:mt-0\">\r\n        <button \r\n          @click=\"refreshData\"\r\n          :disabled=\"loading\"\r\n          class=\"btn-primary inline-flex items-center\"\r\n        >\r\n          <svg v-if=\"loading\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          <svg v-else class=\"-ml-1 mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\r\n          </svg>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Summary Cards -->\r\n    <div class=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-primary-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Buildings</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ buildings.length }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"></path>\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 5v4m8-4v4M8 11v4m8-4v4\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Apartments</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ totalApartments }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Cheques</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ totalCheques }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <div class=\"flex items-center\">\r\n          <div class=\"flex-shrink-0\">\r\n            <div class=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\r\n              <svg class=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          <div class=\"ml-5 w-0 flex-1\">\r\n            <dl>\r\n              <dt class=\"text-sm font-medium text-gray-500 truncate\">Total Amount</dt>\r\n              <dd class=\"text-lg font-medium text-gray-900\">{{ formatCurrency(totalAmount) }}</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Buildings Grid -->\r\n    <div class=\"grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3\">\r\n             <div \r\n         v-for=\"building in buildings\" \r\n         :key=\"building.BuildingID\"\r\n         class=\"card hover:shadow-lg transition-shadow duration-200 cursor-pointer\"\r\n         @click=\"selectBuilding(building)\"\r\n       >\r\n         <div class=\"flex items-center justify-between mb-4\">\r\n           <div class=\"flex items-center\">\r\n             <div class=\"w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center\">\r\n               <svg class=\"w-6 h-6 text-primary-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                 <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\r\n               </svg>\r\n             </div>\r\n             <div class=\"ml-3\">\r\n               <h3 class=\"text-lg font-medium text-gray-900\">{{ building.BuildingName }}</h3>\r\n               <p class=\"text-sm text-gray-500\">Building #{{ building.BuildingNumber || 'N/A' }}</p>\r\n             </div>\r\n           </div>\r\n           <div class=\"text-right\">\r\n             <div class=\"text-2xl font-bold text-primary-600\">\r\n               {{ getBuildingStats(building.BuildingName).apartments }}\r\n             </div>\r\n             <div class=\"text-xs text-gray-500\">Apartments</div>\r\n           </div>\r\n         </div>\r\n\r\n         <div class=\"border-t border-gray-100 pt-4\">\r\n           <div class=\"grid grid-cols-2 gap-4 text-sm\">\r\n             <div>\r\n               <span class=\"text-gray-500\">Cheques:</span>\r\n               <span class=\"ml-2 font-medium text-gray-900\">\r\n                 {{ getBuildingStats(building.BuildingName).cheques }}\r\n               </span>\r\n             </div>\r\n             <div>\r\n               <span class=\"text-gray-500\">Amount:</span>\r\n               <span class=\"ml-2 font-medium text-gray-900\">\r\n                 {{ formatCurrency(getBuildingStats(building.BuildingName).amount) }}\r\n               </span>\r\n             </div>\r\n           </div>\r\n         </div>\r\n\r\n         <div class=\"mt-4 pt-4 border-t border-gray-100\">\r\n           <div class=\"flex items-center justify-between\">\r\n             <span class=\"text-sm text-gray-500\">Occupancy Rate</span>\r\n             <div class=\"flex items-center\">\r\n               <div class=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\r\n                 <div \r\n                   class=\"bg-primary-600 h-2 rounded-full\" \r\n                   :style=\"{ width: getOccupancyRate(building.BuildingName) + '%' }\"\r\n                 ></div>\r\n               </div>\r\n               <span class=\"text-sm font-medium text-gray-900\">\r\n                 {{ getOccupancyRate(building.BuildingName) }}%\r\n               </span>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n    </div>\r\n\r\n    <!-- Building Details Modal -->\r\n    <div v-if=\"selectedBuilding\" class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n      <div class=\"relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white\">\r\n        <div class=\"mt-3\">\r\n          <div class=\"flex items-center justify-between mb-4\">\r\n            <h3 class=\"text-lg font-medium text-gray-900\">\r\n              {{ selectedBuilding.BuildingName }} Details\r\n            </h3>\r\n            <button \r\n              @click=\"selectedBuilding = null\"\r\n              class=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"space-y-4\">\r\n            <div class=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Building Name</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ selectedBuilding.BuildingName }}</p>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-gray-700\">Building Number</label>\r\n                <p class=\"mt-1 text-sm text-gray-900\">{{ selectedBuilding.BuildingNumber || 'N/A' }}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"border-t border-gray-200 pt-4\">\r\n              <h4 class=\"text-md font-medium text-gray-900 mb-3\">Apartment List</h4>\r\n              <div class=\"max-h-60 overflow-y-auto\">\r\n                                 <div \r\n                   v-for=\"apartment in getBuildingApartments(selectedBuilding.BuildingName)\"\r\n                   :key=\"apartment.ApartmentID\"\r\n                   class=\"flex items-center justify-between py-2 border-b border-gray-100 last:border-b-0\"\r\n                 >\r\n                   <div>\r\n                     <span class=\"text-sm font-medium text-gray-900\">{{ apartment.ApartmentName }}</span>\r\n                     <span class=\"ml-2 text-xs text-gray-500\">Floor {{ apartment.FloorNumber }}</span>\r\n                   </div>\r\n                   <span class=\"text-xs text-gray-500\">{{ apartment.ApartmentNumber || 'N/A' }}</span>\r\n                 </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"border-t border-gray-200 pt-4\">\r\n              <h4 class=\"text-md font-medium text-gray-900 mb-3\">Financial Summary</h4>\r\n                             <div class=\"grid grid-cols-3 gap-4 text-center\">\r\n                 <div>\r\n                   <div class=\"text-2xl font-bold text-primary-600\">\r\n                     {{ getBuildingStats(selectedBuilding.BuildingName).apartments }}\r\n                   </div>\r\n                   <div class=\"text-xs text-gray-500\">Apartments</div>\r\n                 </div>\r\n                 <div>\r\n                   <div class=\"text-2xl font-bold text-green-600\">\r\n                     {{ getBuildingStats(selectedBuilding.BuildingName).cheques }}\r\n                   </div>\r\n                   <div class=\"text-xs text-gray-500\">Cheques</div>\r\n                 </div>\r\n                 <div>\r\n                   <div class=\"text-2xl font-bold text-purple-600\">\r\n                     {{ formatCurrency(getBuildingStats(selectedBuilding.BuildingName).amount) }}\r\n                   </div>\r\n                   <div class=\"text-xs text-gray-500\">Total Amount</div>\r\n                 </div>\r\n               </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'Buildings',\r\n  setup() {\r\n    const loading = ref(false)\r\n    const buildings = ref([])\r\n    const apartments = ref([])\r\n    const cheques = ref([])\r\n    const selectedBuilding = ref(null)\r\n\r\n    const totalApartments = computed(() => apartments.value.length)\r\n    const totalCheques = computed(() => cheques.value.length)\r\n    const totalAmount = computed(() => {\r\n      return cheques.value.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n    })\r\n\r\n    const fetchData = async () => {\r\n      loading.value = true\r\n      try {\r\n        const [buildingsRes, apartmentsRes, chequesRes] = await Promise.all([\r\n          axios.get('/api/buildings'),\r\n          axios.get('/api/apartments'),\r\n          axios.get('/api/cheques/detail')\r\n        ])\r\n\r\n        buildings.value = buildingsRes.data\r\n        apartments.value = apartmentsRes.data\r\n        cheques.value = chequesRes.data\r\n\r\n                 // Debug logging\r\n         console.log('Buildings - Buildings data:', buildingsRes.data)\r\n         console.log('Buildings - Apartments data:', apartmentsRes.data)\r\n         console.log('Buildings - Cheques data:', chequesRes.data)\r\n         console.log('Buildings - Sample building name:', buildingsRes.data[0]?.BuildingName)\r\n         console.log('Buildings - Sample apartment BuildingName:', apartmentsRes.data[0]?.BuildingName)\r\n         console.log('Buildings - Sample cheque BuildingName:', chequesRes.data[0]?.BuildingName)\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error)\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    const getBuildingStats = (buildingName) => {\r\n      // Debug logging for this specific building\r\n      console.log(`Buildings - Getting stats for BuildingName: ${buildingName}`)\r\n      console.log(`Buildings - Available apartments:`, apartments.value)\r\n      console.log(`Buildings - Available cheques:`, cheques.value)\r\n      \r\n      // Filter apartments by building name\r\n      const buildingApartments = apartments.value.filter(apt => \r\n        apt.BuildingName === buildingName || \r\n        apt.buildingName === buildingName\r\n      )\r\n      \r\n      // Filter cheques by building name\r\n      const buildingCheques = cheques.value.filter(cheque => \r\n        cheque.BuildingName === buildingName || \r\n        cheque.buildingName === buildingName\r\n      )\r\n      \r\n      const totalAmount = buildingCheques.reduce((sum, cheque) => sum + (cheque.Amount || 0), 0)\r\n\r\n      const stats = {\r\n        apartments: buildingApartments.length,\r\n        cheques: buildingCheques.length,\r\n        amount: totalAmount\r\n      }\r\n      \r\n      console.log(`Buildings - Stats for BuildingName ${buildingName}:`, stats)\r\n      console.log(`Buildings - Found apartments:`, buildingApartments)\r\n      console.log(`Buildings - Found cheques:`, buildingCheques)\r\n      \r\n      return stats\r\n    }\r\n\r\n    const getBuildingApartments = (buildingName) => {\r\n      // Filter apartments by building name\r\n      return apartments.value.filter(apt => \r\n        apt.BuildingName === buildingName || \r\n        apt.buildingName === buildingName\r\n      )\r\n    }\r\n\r\n    const getOccupancyRate = (buildingName) => {\r\n      // Calculate real occupancy rate using the IsOccupied column from sp_GetApartments\r\n      const buildingApartments = apartments.value.filter(apt => \r\n        apt.BuildingName === buildingName || \r\n        apt.buildingName === buildingName\r\n      )\r\n      \r\n      if (buildingApartments.length === 0) return 0\r\n      \r\n      // Count apartments where IsOccupied is true\r\n      const occupiedApartments = buildingApartments.filter(apt => \r\n        apt.IsOccupied === true || \r\n        apt.IsOccupied === 1 || \r\n        apt.isOccupied === true || \r\n        apt.isOccupied === 1\r\n      )\r\n      \r\n      // Calculate occupancy rate: (Occupied Apartments / Total Apartments) Ã— 100\r\n      const occupancyRate = (occupiedApartments.length / buildingApartments.length) * 100\r\n      \r\n      console.log(`Buildings - Occupancy calculation for ${buildingName}:`, {\r\n        totalApartments: buildingApartments.length,\r\n        occupiedApartments: occupiedApartments.length,\r\n        occupancyRate: Math.round(occupancyRate)\r\n      })\r\n      \r\n      return Math.round(occupancyRate)\r\n    }\r\n\r\n    // Alternative: Calculate occupancy based on recent activity (last 3 months)\r\n    const getRecentOccupancyRate = (buildingName) => {\r\n      const buildingApartments = apartments.value.filter(apt => \r\n        apt.BuildingName === buildingName || \r\n        apt.buildingName === buildingName\r\n      )\r\n      \r\n      if (buildingApartments.length === 0) return 0\r\n      \r\n      // For recent occupancy, we can still use the IsOccupied column\r\n      // This assumes that IsOccupied reflects current status\r\n      const recentlyOccupiedApartments = buildingApartments.filter(apt => \r\n        apt.IsOccupied === true || \r\n        apt.IsOccupied === 1 || \r\n        apt.isOccupied === true || \r\n        apt.isOccupied === 1\r\n      )\r\n      \r\n      const recentOccupancyRate = (recentlyOccupiedApartments.length / buildingApartments.length) * 100\r\n      \r\n      console.log(`Buildings - Recent occupancy calculation for ${buildingName}:`, {\r\n        totalApartments: buildingApartments.length,\r\n        recentlyOccupiedApartments: recentlyOccupiedApartments.length,\r\n        recentOccupancyRate: Math.round(recentOccupancyRate)\r\n      })\r\n      \r\n      return Math.round(recentOccupancyRate)\r\n    }\r\n\r\n    // Get detailed occupancy information for a building\r\n    const getOccupancyDetails = (buildingName) => {\r\n      const buildingApartments = apartments.value.filter(apt => \r\n        apt.BuildingName === buildingName || \r\n        apt.buildingName === buildingName\r\n      )\r\n      \r\n      if (buildingApartments.length === 0) return { total: 0, occupied: 0, vacant: 0, rate: 0 }\r\n      \r\n      const occupiedApartments = buildingApartments.filter(apt => \r\n        apt.IsOccupied === true || \r\n        apt.IsOccupied === 1 || \r\n        apt.isOccupied === true || \r\n        apt.isOccupied === 1\r\n      )\r\n      \r\n      const vacantApartments = buildingApartments.filter(apt => \r\n        apt.IsOccupied === false || \r\n        apt.IsOccupied === 0 || \r\n        apt.isOccupied === false || \r\n        apt.isOccupied === 0\r\n      )\r\n      \r\n      return {\r\n        total: buildingApartments.length,\r\n        occupied: occupiedApartments.length,\r\n        vacant: vacantApartments.length,\r\n        rate: Math.round((occupiedApartments.length / buildingApartments.length) * 100)\r\n      }\r\n    }\r\n\r\n    const selectBuilding = (building) => {\r\n      selectedBuilding.value = building\r\n    }\r\n\r\n    const refreshData = async () => {\r\n      await fetchData()\r\n    }\r\n\r\n    const formatCurrency = (amount) => {\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount || 0)\r\n    }\r\n\r\n    onMounted(() => {\r\n      fetchData()\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      buildings,\r\n      apartments,\r\n      cheques,\r\n      selectedBuilding,\r\n      totalApartments,\r\n      totalCheques,\r\n      totalAmount,\r\n             getBuildingStats,\r\n       getBuildingApartments,\r\n       getOccupancyRate,\r\n       getRecentOccupancyRate,\r\n       selectBuilding,\r\n       refreshData,\r\n       formatCurrency\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"AAsPA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AAC7C,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIN,GAAG,CAAC,KAAK;IACzB,MAAMO,SAAQ,GAAIP,GAAG,CAAC,EAAE;IACxB,MAAMQ,UAAS,GAAIR,GAAG,CAAC,EAAE;IACzB,MAAMS,OAAM,GAAIT,GAAG,CAAC,EAAE;IACtB,MAAMU,gBAAe,GAAIV,GAAG,CAAC,IAAI;IAEjC,MAAMW,eAAc,GAAIV,QAAQ,CAAC,MAAMO,UAAU,CAACI,KAAK,CAACC,MAAM;IAC9D,MAAMC,YAAW,GAAIb,QAAQ,CAAC,MAAMQ,OAAO,CAACG,KAAK,CAACC,MAAM;IACxD,MAAME,WAAU,GAAId,QAAQ,CAAC,MAAM;MACjC,OAAOQ,OAAO,CAACG,KAAK,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAE,IAAKC,MAAM,CAACC,MAAK,IAAK,CAAC,CAAC,EAAE,CAAC;IAC5E,CAAC;IAED,MAAMC,SAAQ,GAAI,MAAAA,CAAA,KAAY;MAC5Bd,OAAO,CAACM,KAAI,GAAI,IAAG;MACnB,IAAI;QACF,MAAM,CAACS,YAAY,EAAEC,aAAa,EAAEC,UAAU,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClEtB,KAAK,CAACuB,GAAG,CAAC,gBAAgB,CAAC,EAC3BvB,KAAK,CAACuB,GAAG,CAAC,iBAAiB,CAAC,EAC5BvB,KAAK,CAACuB,GAAG,CAAC,qBAAqB,EAChC;QAEDnB,SAAS,CAACK,KAAI,GAAIS,YAAY,CAACM,IAAG;QAClCnB,UAAU,CAACI,KAAI,GAAIU,aAAa,CAACK,IAAG;QACpClB,OAAO,CAACG,KAAI,GAAIW,UAAU,CAACI,IAAG;;QAErB;QACRC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAER,YAAY,CAACM,IAAI;QAC5DC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEP,aAAa,CAACK,IAAI;QAC9DC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEN,UAAU,CAACI,IAAI;QACxDC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAER,YAAY,CAACM,IAAI,CAAC,CAAC,CAAC,EAAEG,YAAY;QACnFF,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEP,aAAa,CAACK,IAAI,CAAC,CAAC,CAAC,EAAEG,YAAY;QAC7FF,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEN,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,EAAEG,YAAY;MAC1F,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK;MAC7C,UAAU;QACRzB,OAAO,CAACM,KAAI,GAAI,KAAI;MACtB;IACF;IAEA,MAAMoB,gBAAe,GAAKC,YAAY,IAAK;MACzC;MACAL,OAAO,CAACC,GAAG,CAAC,+CAA+CI,YAAY,EAAE;MACzEL,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAErB,UAAU,CAACI,KAAK;MACjEgB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEpB,OAAO,CAACG,KAAK;;MAE3D;MACA,MAAMsB,kBAAiB,GAAI1B,UAAU,CAACI,KAAK,CAACuB,MAAM,CAACC,GAAE,IACnDA,GAAG,CAACN,YAAW,KAAMG,YAAW,IAChCG,GAAG,CAACH,YAAW,KAAMA,YACvB;;MAEA;MACA,MAAMI,eAAc,GAAI5B,OAAO,CAACG,KAAK,CAACuB,MAAM,CAACjB,MAAK,IAChDA,MAAM,CAACY,YAAW,KAAMG,YAAW,IACnCf,MAAM,CAACe,YAAW,KAAMA,YAC1B;MAEA,MAAMlB,WAAU,GAAIsB,eAAe,CAACrB,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAE,IAAKC,MAAM,CAACC,MAAK,IAAK,CAAC,CAAC,EAAE,CAAC;MAEzF,MAAMmB,KAAI,GAAI;QACZ9B,UAAU,EAAE0B,kBAAkB,CAACrB,MAAM;QACrCJ,OAAO,EAAE4B,eAAe,CAACxB,MAAM;QAC/B0B,MAAM,EAAExB;MACV;MAEAa,OAAO,CAACC,GAAG,CAAC,sCAAsCI,YAAY,GAAG,EAAEK,KAAK;MACxEV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEK,kBAAkB;MAC/DN,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEQ,eAAe;MAEzD,OAAOC,KAAI;IACb;IAEA,MAAME,qBAAoB,GAAKP,YAAY,IAAK;MAC9C;MACA,OAAOzB,UAAU,CAACI,KAAK,CAACuB,MAAM,CAACC,GAAE,IAC/BA,GAAG,CAACN,YAAW,KAAMG,YAAW,IAChCG,GAAG,CAACH,YAAW,KAAMA,YACvB;IACF;IAEA,MAAMQ,gBAAe,GAAKR,YAAY,IAAK;MACzC;MACA,MAAMC,kBAAiB,GAAI1B,UAAU,CAACI,KAAK,CAACuB,MAAM,CAACC,GAAE,IACnDA,GAAG,CAACN,YAAW,KAAMG,YAAW,IAChCG,GAAG,CAACH,YAAW,KAAMA,YACvB;MAEA,IAAIC,kBAAkB,CAACrB,MAAK,KAAM,CAAC,EAAE,OAAO;;MAE5C;MACA,MAAM6B,kBAAiB,GAAIR,kBAAkB,CAACC,MAAM,CAACC,GAAE,IACrDA,GAAG,CAACO,UAAS,KAAM,IAAG,IACtBP,GAAG,CAACO,UAAS,KAAM,KACnBP,GAAG,CAACQ,UAAS,KAAM,IAAG,IACtBR,GAAG,CAACQ,UAAS,KAAM,CACrB;;MAEA;MACA,MAAMC,aAAY,GAAKH,kBAAkB,CAAC7B,MAAK,GAAIqB,kBAAkB,CAACrB,MAAM,GAAI,GAAE;MAElFe,OAAO,CAACC,GAAG,CAAC,yCAAyCI,YAAY,GAAG,EAAE;QACpEtB,eAAe,EAAEuB,kBAAkB,CAACrB,MAAM;QAC1C6B,kBAAkB,EAAEA,kBAAkB,CAAC7B,MAAM;QAC7CgC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAACF,aAAa;MACzC,CAAC;MAED,OAAOC,IAAI,CAACC,KAAK,CAACF,aAAa;IACjC;;IAEA;IACA,MAAMG,sBAAqB,GAAKf,YAAY,IAAK;MAC/C,MAAMC,kBAAiB,GAAI1B,UAAU,CAACI,KAAK,CAACuB,MAAM,CAACC,GAAE,IACnDA,GAAG,CAACN,YAAW,KAAMG,YAAW,IAChCG,GAAG,CAACH,YAAW,KAAMA,YACvB;MAEA,IAAIC,kBAAkB,CAACrB,MAAK,KAAM,CAAC,EAAE,OAAO;;MAE5C;MACA;MACA,MAAMoC,0BAAyB,GAAIf,kBAAkB,CAACC,MAAM,CAACC,GAAE,IAC7DA,GAAG,CAACO,UAAS,KAAM,IAAG,IACtBP,GAAG,CAACO,UAAS,KAAM,KACnBP,GAAG,CAACQ,UAAS,KAAM,IAAG,IACtBR,GAAG,CAACQ,UAAS,KAAM,CACrB;MAEA,MAAMM,mBAAkB,GAAKD,0BAA0B,CAACpC,MAAK,GAAIqB,kBAAkB,CAACrB,MAAM,GAAI,GAAE;MAEhGe,OAAO,CAACC,GAAG,CAAC,gDAAgDI,YAAY,GAAG,EAAE;QAC3EtB,eAAe,EAAEuB,kBAAkB,CAACrB,MAAM;QAC1CoC,0BAA0B,EAAEA,0BAA0B,CAACpC,MAAM;QAC7DqC,mBAAmB,EAAEJ,IAAI,CAACC,KAAK,CAACG,mBAAmB;MACrD,CAAC;MAED,OAAOJ,IAAI,CAACC,KAAK,CAACG,mBAAmB;IACvC;;IAEA;IACA,MAAMC,mBAAkB,GAAKlB,YAAY,IAAK;MAC5C,MAAMC,kBAAiB,GAAI1B,UAAU,CAACI,KAAK,CAACuB,MAAM,CAACC,GAAE,IACnDA,GAAG,CAACN,YAAW,KAAMG,YAAW,IAChCG,GAAG,CAACH,YAAW,KAAMA,YACvB;MAEA,IAAIC,kBAAkB,CAACrB,MAAK,KAAM,CAAC,EAAE,OAAO;QAAEuC,KAAK,EAAE,CAAC;QAAEC,QAAQ,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAE;MAExF,MAAMb,kBAAiB,GAAIR,kBAAkB,CAACC,MAAM,CAACC,GAAE,IACrDA,GAAG,CAACO,UAAS,KAAM,IAAG,IACtBP,GAAG,CAACO,UAAS,KAAM,KACnBP,GAAG,CAACQ,UAAS,KAAM,IAAG,IACtBR,GAAG,CAACQ,UAAS,KAAM,CACrB;MAEA,MAAMY,gBAAe,GAAItB,kBAAkB,CAACC,MAAM,CAACC,GAAE,IACnDA,GAAG,CAACO,UAAS,KAAM,KAAI,IACvBP,GAAG,CAACO,UAAS,KAAM,KACnBP,GAAG,CAACQ,UAAS,KAAM,KAAI,IACvBR,GAAG,CAACQ,UAAS,KAAM,CACrB;MAEA,OAAO;QACLQ,KAAK,EAAElB,kBAAkB,CAACrB,MAAM;QAChCwC,QAAQ,EAAEX,kBAAkB,CAAC7B,MAAM;QACnCyC,MAAM,EAAEE,gBAAgB,CAAC3C,MAAM;QAC/B0C,IAAI,EAAET,IAAI,CAACC,KAAK,CAAEL,kBAAkB,CAAC7B,MAAK,GAAIqB,kBAAkB,CAACrB,MAAM,GAAI,GAAG;MAChF;IACF;IAEA,MAAM4C,cAAa,GAAKC,QAAQ,IAAK;MACnChD,gBAAgB,CAACE,KAAI,GAAI8C,QAAO;IAClC;IAEA,MAAMC,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,MAAMvC,SAAS,CAAC;IAClB;IAEA,MAAMwC,cAAa,GAAKrB,MAAM,IAAK;MACjC,OAAO,IAAIsB,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QACpCC,KAAK,EAAE,UAAU;QACjBC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACC,MAAM,CAAC1B,MAAK,IAAK,CAAC;IACvB;IAEArC,SAAS,CAAC,MAAM;MACdkB,SAAS,CAAC;IACZ,CAAC;IAED,OAAO;MACLd,OAAO;MACPC,SAAS;MACTC,UAAU;MACVC,OAAO;MACPC,gBAAgB;MAChBC,eAAe;MACfG,YAAY;MACZC,WAAW;MACJiB,gBAAgB;MACtBQ,qBAAqB;MACrBC,gBAAgB;MAChBO,sBAAsB;MACtBS,cAAc;MACdE,WAAW;MACXC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}